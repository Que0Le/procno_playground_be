# from typing import TYPE_CHECKING

from sqlalchemy import Boolean, Column, Integer, String, DateTime, ForeignKey, ARRAY
import uuid

from app.db.base_class import Base
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.schema import FetchedValue


class QuestionMetaDB(Base):
    # overwrite the table name
    __tablename__ = 'questions'

    id = Column(Integer, index=True, server_default=FetchedValue())
    uniq_id: uuid.UUID = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4, server_default=FetchedValue())
    topic_uniq_id = Column(UUID(as_uuid=True), ForeignKey("topics.uniq_id"))
    owner_uniq_id = Column(UUID(as_uuid=True), ForeignKey("users.uniq_id"))
    commentar_uniq_id = Column(UUID(as_uuid=True), ForeignKey("commentars.uniq_id"))
    record_uniq_id = Column(UUID(as_uuid=True), ForeignKey("records.uniq_id"))
    read_text_uniq_id = Column(UUID(as_uuid=True), ForeignKey("read_texts.uniq_id"))
    created_at = Column(DateTime(), nullable=False, server_default=FetchedValue())
    updated_at = Column(DateTime(), nullable=False, server_default=FetchedValue())


class QuestionCombiDB(Base):
    # overwrite the table name
    __tablename__ = '__none_question__'
    # Fake PK and indexed, cause this table is temp and generated by SQL query
    q_id = Column(Integer, primary_key=True, index=True)
    q_created_at = Column(DateTime(), nullable=False)
    q_updated_at = Column(DateTime(), nullable=False)

    rt_read_text = Column(String)
    rt_created_at = Column(DateTime(), nullable=False)
    rt_updated_at = Column(DateTime(), nullable=False)

    rc_filename = Column(String)
    rc_created_at = Column(DateTime(), nullable=False)
    rc_updated_at = Column(DateTime(), nullable=False)

    c_commentar = Column(String)
    c_created_at = Column(DateTime(), nullable=False)
    c_updated_at = Column(DateTime(), nullable=False)
