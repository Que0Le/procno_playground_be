from typing import TYPE_CHECKING

from sqlalchemy import Boolean, Column, Integer, String, DateTime, ForeignKey, ARRAY
from sqlalchemy.orm import relationship

from app.db.base_class import Base

# if TYPE_CHECKING:
#     from .item import Item  # noqa: F401

class QuestionDB(Base):
    # overwrite the tabble name
    __tablename__  = 'questions'

    id = Column(Integer, primary_key=True, index=True)
    owner_id = Column(Integer, ForeignKey("users.id"))
    commentar_id = Column(Integer, ForeignKey("commentars.id"))
    record_id = Column(Integer, ForeignKey("records.id"))
    text_id = Column(Integer, ForeignKey("read_texts.id"))
    created_at = Column(DateTime(), nullable=False)
    updated_at = Column(DateTime(), nullable=False)

    def to_string(self):
        return str(
            f"TagDB:\nid[{str(self.id)}]\n\
            owner_id[{str(self.owner_id)}]\n\
            commentar_id[{str(self.commentar_id)}]\n\
            record_id[{str(self.record_id)}]\n\
            text_id[{str(self.text_id)}]\n\
            created_at[{str(self.created_at)}]\n\
            updated_at[{str(self.updated_at)}]")

class QuestionCombiDB(Base):
    # overwrite the tabble name
    __tablename__  = '__none_question__'
    # Fake PK and indexed, cause this table is temp and generated by SQL query
    q_id = Column(Integer, primary_key=True, index=True)
    q_created_at = Column(DateTime(), nullable=False)
    q_updated_at = Column(DateTime(), nullable=False)

    rt_read_text = Column(String)
    rt_created_at = Column(DateTime(), nullable=False)
    rt_updated_at = Column(DateTime(), nullable=False)

    rc_filename = Column(String)
    rc_created_at = Column(DateTime(), nullable=False)
    rc_updated_at = Column(DateTime(), nullable=False)

    c_commentar = Column(String)
    c_created_at = Column(DateTime(), nullable=False)
    c_updated_at = Column(DateTime(), nullable=False)

    def to_string(self):
        return str(
            f"TagDB:\nq_id[{str(self.q_id)}]\n\
            q_created_at[{str(self.q_created_at)}]\n\
            q_updated_at[{str(self.q_updated_at)}]\n\
            rt_read_text[{str(self.rt_read_text)}]\n\
            rt_created_at[{str(self.rt_created_at)}]\n\
            rt_updated_at[{str(self.rt_updated_at)}]\n\
            rc_filename[{str(self.rc_filename)}]\n\
            rc_created_at[{str(self.rc_created_at)}]\n\
            rc_updated_at[{str(self.rc_updated_at)}]\n\
            c_commentar[{str(self.c_commentar)}]\n\
            c_created_at[{str(self.c_created_at)}]\n\
            c_updated_at[{str(self.c_updated_at)}]")

    #TODO: add more function to decide what to return to the client (exclude internal id ...)